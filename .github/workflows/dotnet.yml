name: .NET

on:
  push:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: 🚀 Rodar testes com cobertura
        run: dotnet test --no-build --collect:"XPlat Code Coverage"
        working-directory: SimuladorAppTests
      
      - name: 📊 Instalar ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
      
      - name: 🎨 Gerar relatório HTML
        run: |
          reportgenerator -reports:**/TestResults/*/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:Html
      
      - name: 📊 Extrair cobertura e publicar no Summary
        run: |
          TOTAL_COVERAGE=$(grep -oP '(?<=line-rate=")[0-9.]*' coveragereport/Cobertura.xml | awk '{s+=$1} END {print s*100}')
          echo '### 📊 Relatório de Cobertura de Código' >> $GITHUB_STEP_SUMMARY
          echo "**Cobertura Total:** $TOTAL_COVERAGE%" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Meta: 80%" >> $GITHUB_STEP_SUMMARY
          if (( $(echo "$TOTAL_COVERAGE < 80" | bc -l) )); then
            echo "⚠️ A cobertura está abaixo da meta!" >> $GITHUB_STEP_SUMMARY
            exit 1  # Falha o pipeline se a cobertura for insuficiente
          fi
 
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverageReport
          path: coveragereport

  docker:
    name: Create and push docker image
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/simuladorapp:latest .

      - name: Push docker image to hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/simuladorapp:latest
