name: .NET

on:
  push:
    branches: ["master"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --collect:"XPlat Code Coverage"
        working-directory: SimuladorAppTests

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate HTML report
        run: |
          reportgenerator -reports:**/TestResults/*/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:Html

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverageReport
          path: coveragereport

      - name: get coverage and publish on summary
        run: |
          COVERAGE_FILE=$(find SimuladorAppTests/TestResults -name "coverage.cobertura.xml" | head -n 1)
          if [[ -z "$COVERAGE_FILE" ]]; then
            echo "❌ Arquivo de cobertura não encontrado!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          TOTAL_COVERAGE=$(grep -oP '(?<=line-rate=")[0-9.]+' "$COVERAGE_FILE" | head -n 1)

          TOTAL_COVERAGE_PERCENT=$(echo "$TOTAL_COVERAGE * 100" | bc)

          echo '### 📊 Relatório de Cobertura de Código' >> $GITHUB_STEP_SUMMARY
          echo "**Cobertura Total:** $TOTAL_COVERAGE_PERCENT% - Meta: 80%" >> $GITHUB_STEP_SUMMARY

          if (( $(echo "$TOTAL_COVERAGE_PERCENT < 80" | bc -l) )); then
            echo "A cobertura está abaixo da meta! Para mais informações, baixe o report." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  docker:
    name: Create and push docker image
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/simuladorapp:latest .

      - name: Push docker image to hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/simuladorapp:latest

  deploy:
    needs: docker
    runs-on: self-hosted
    steps:
      - name: Pull image from docker hub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/simuladorapp:latest

      - name: Run docker container
        run: docker run -it ${{ secrets.DOCKER_USERNAME }}/simuladorapp:latest
