name: CI/CD Pipeline

on:
  push:
    branches: ["master"]

jobs:
  build:
    name: Build, test and coverage report
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --collect:"XPlat Code Coverage"
        working-directory: SimuladorAppTests

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate HTML report
        run: |
          reportgenerator -reports:**/TestResults/*/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:Html

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: CodeCoverageReport
          path: coveragereport

      - name: Coverage and publish on summary
        run: |
          COVERAGE_FILE=$(find SimuladorAppTests/TestResults -name "coverage.cobertura.xml" | head -n 1)
          if [[ -z "$COVERAGE_FILE" ]]; then
            echo "Arquivo de cobertura nÃ£o encontrado!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          TOTAL_COVERAGE=$(grep -oP '(?<=line-rate=")[0-9.]+' "$COVERAGE_FILE" | head -n 1)
          TOTAL_COVERAGE_PERCENT=$(echo "$TOTAL_COVERAGE * 100" | bc)

          echo '### ðŸ“Š RelatÃ³rio de Cobertura de CÃ³digo' >> $GITHUB_STEP_SUMMARY
          echo "**Cobertura Total:** $TOTAL_COVERAGE_PERCENT% - Meta: ${{ vars.COVERAGE_META }}%" >> $GITHUB_STEP_SUMMARY

          if (( $(echo "$TOTAL_COVERAGE_PERCENT < ${{ vars.COVERAGE_META }}" | bc -l) )); then
            echo "A cobertura estÃ¡ abaixo da meta! Para mais informaÃ§Ãµes, baixe o report." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  docker:
    name: Build and publish docker image
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/simuladorapp:latest .

      - name: Push docker image to hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/simuladorapp:latest

  deploy:
    name: Deploy to EC2
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      #
      - name: Check and Start EC2 Instance
        id: start-ec2
        run: |
          INSTANCE_ID=${{ secrets.EC2_INSTANCE_ID }}
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[*].Instances[*].State.Name' --output text)

          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Starting EC2 instance..."
            aws ec2 start-instances --instance-ids $INSTANCE_ID
            echo "Waiting for instance to be in running state..."
            aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          else
            echo "EC2 instance already running."
          fi

          PUBLIC_DNS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
          echo "Public DNS: $PUBLIC_DNS"

          echo "public_dns=$PUBLIC_DNS" >> $GITHUB_OUTPUT

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.start-ec2.outputs.public_dns }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            #!/bin/bash
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/simuladorteste:1.0
            sudo docker stop simuladorteste || true
            sudo docker rm simuladorteste || true
            sudo docker run -d -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/simuladorteste:1.0

    #   - name: Deploy to server
    #     uses: appleboy/ssh-action@master
    #     with:
    #       host: ${{ secrets.EC2_HOST }}
    #       username: ${{ secrets.EC2_USERNAME }}
    #       key: ${{ secrets.EC2_PRIVATE_KEY }}
    #       script: |
    #         #!/bin/bash
    #         sudo docker pull ${{ secrets.DOCKER_USERNAME }}/simuladorteste:1.0
    #         sudo docker stop simuladorteste || true
    #         sudo docker rm simuladorteste || true
    #         sudo docker run -d -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/simuladorteste:1.0
